{"version":3,"sources":["db-test.js"],"names":["test","require","Db","uuid","r","fixtures","utils","beforeEach","t","dbName","v4","db","connect","context","true","connected","afterEach","always","disconnect","false","conn","dbDrop","run","is","saveImage","image","getImage","created","description","url","likes","liked","userId","deepEqual","tags","id","publicId","encode","truthy","createdAt","likeImage","result","throws","images","getImages","saveImages","map","img","all","length","saveUser","user","getUser","plainPassword","password","username","email","name","encrypt","authenticate","success","fail","failure","getImagesByUser","random","Math","round","i","push","getImagesByUserTag","tag","getImagesByTag"],"mappings":"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","file":"db-test.js","sourcesContent":["'use strict'\r\nconst test = require('ava')\r\nconst Db = require('../')\r\nconst uuid = require('uuid-base62')\r\nconst r = require('rethinkdb')\r\nconst fixtures = require('./fixtures')\r\nconst utils = require('../lib/utils')\r\n\r\ntest.beforeEach('setup database', async t => {\r\n  const dbName = `platzigram_${uuid.v4()}`\r\n  const db = new Db({db: dbName})\r\n  await db.connect()\r\n  t.context.db = db\r\n  t.context.dbName = dbName\r\n  t.true(db.connected, 'should be connected')\r\n})\r\n\r\ntest.afterEach.always('cleanup database', async t => {\r\n  let db = t.context.db\r\n  let dbName = t.context.dbName\r\n  await db.disconnect()\r\n  t.false(db.connected, 'should be disconnected')\r\n  let conn = await r.connect({})\r\n  await r.dbDrop(dbName).run(conn)\r\n})\r\n\r\ntest('save image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.saveImage, 'function', 'saveImage is a function')\r\n  let image = fixtures.getImage()\r\n  let created = await db.saveImage(image)\r\n  t.is(created.description, image.description)\r\n  t.is(created.url, image.url)\r\n  t.is(created.likes, image.likes)\r\n  t.is(created.liked, image.liked)\r\n  t.is(created.userId, image.userId)\r\n  t.deepEqual(created.tags, ['awesome', 'tags', 'platzi'])\r\n  t.is(typeof created.id, 'string')\r\n  t.is(created.publicId, uuid.encode(created.id))\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest('like image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.likeImage, 'function', 'likeImage is a function')\r\n  let image = fixtures.getImage()\r\n  let created = await db.saveImage(image)\r\n  let result = await db.likeImage(created.publicId)\r\n  t.true(result.liked)\r\n  t.is(result.likes, image.likes + 1)\r\n})\r\n\r\ntest('get image', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImage, 'function', 'getImage is a function')\r\n  let image = fixtures.getImage()\r\n  let created = await db.saveImage(image)\r\n  let result = await db.getImage(created.publicId)\r\n  t.deepEqual(created, result)\r\n  t.throws(db.getImage('foo'), /not found/)\r\n})\r\n\r\ntest('list all images', async t => {\r\n  let db = t.context.db\r\n  let images = fixtures.getImages()\r\n  let saveImages = images.map(img => db.saveImage(img))\r\n  let created = await Promise.all(saveImages)\r\n  let result = await db.getImages()\r\n  t.is(created.length, result.length)\r\n})\r\n\r\ntest('save user', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.saveUser, 'function', 'saveUser is a function')\r\n  let user = fixtures.getUser()\r\n  let plainPassword = user.password\r\n  let created = await db.saveUser(user)\r\n  t.is(user.username, created.username)\r\n  t.is(user.email, created.email)\r\n  t.is(user.name, created.name)\r\n  t.is(utils.encrypt(plainPassword), created.password)\r\n  t.is(typeof created.id, 'string')\r\n  t.truthy(created.createdAt)\r\n})\r\n\r\ntest('get user', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getUser, 'function', 'getUser is a function')\r\n  let user = fixtures.getUser()\r\n  let created = await db.saveUser(user)\r\n  let result = await db.getUser(user.username)\r\n  t.deepEqual(created, result)\r\n  t.throws(db.getUser('foo'), /not found/)\r\n})\r\n\r\ntest('authenticate user', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.authenticate, 'function', 'authenticate is a function')\r\n  let user = fixtures.getUser()\r\n  let plainPassword = user.password\r\n  await db.saveUser(user)\r\n  let success = await db.authenticate(user.username, plainPassword)\r\n  t.true(success)\r\n  let fail = await db.authenticate(user.username, 'foo')\r\n  t.false(fail)\r\n  let failure = await db.authenticate('foo', 'bar')\r\n  t.false(failure)\r\n})\r\n\r\ntest('list images by user', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImagesByUser, 'function', 'getImagesByUser')\r\n  let images = fixtures.getImages(10)\r\n  let userId = uuid.uuid()\r\n  let random = Math.round(Math.random() * images.length)\r\n  let saveImages = []\r\n  for (let i = 0; i < images.length; i++) {\r\n    if (i < random) {\r\n      images[i].userId = userId\r\n    }\r\n    saveImages.push(db.saveImage(images[i]))\r\n  }\r\n  await Promise.all(saveImages)\r\n  let result = await db.getImagesByUser(userId)\r\n  t.is(result.length, random)\r\n})\r\n\r\ntest('list images by tag', async t => {\r\n  let db = t.context.db\r\n  t.is(typeof db.getImagesByUserTag, 'function', 'getImagesByTag is a function')\r\n  let images = fixtures.getImages(10)\r\n  let tag = '#filterit'\r\n  let random = Math.round(Math.random() * images.length)\r\n  let saveImages = []\r\n  for (let i = 0; i < images.length; i++) {\r\n    if (i < random) {\r\n      images[i].description = tag\r\n    }\r\n    saveImages.push(db.saveImage(images[i]))\r\n  }\r\n  await Promise.all(saveImages)\r\n  let result = await db.getImagesByTag(tag)\r\n  t.is(result.length, random)\r\n})\r\n"]}